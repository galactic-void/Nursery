<?php
namespace Aura\Http;

use Aura\Http\Factory\Cookie as CookieFactory;

/**
 * Test class for Cookies.
 * Generated by PHPUnit on 2011-05-10 at 11:16:02.
 */
class CookiesTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Cookies
     */
    protected $cookies;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->cookies = new Cookies(new CookieFactory);
        MockHttp::reset();
    }

    protected function newCookie(
        $name, 
        $value    = null, 
        $expire   = null, 
        $path     = null, 
        $domain   = null, 
        $secure   = false, 
        $httponly = true
    )
    {
        return new Cookie(
            $name, 
            $value, 
            $expire, 
            $path, 
            $domain, 
            $secure, 
            $httponly
        );
    }

    public function test__clone()
    {
        $this->cookies->set('Foo', array());

        $cloned = clone $this->cookies;

        $this->assertSame([], $cloned->getAll());
    }
    
    public function test__get()
    {
        $this->cookies->set('foo_bar', array());

        $this->assertEquals( $this->newCookie('foo_bar'), $this->cookies->foo_bar);
    }
    
    public function test__isset()
    {
        $this->cookies->set('foo_bar', array());

        $this->assertTrue(isset($this->cookies->foo_bar));
        $this->assertFalse(isset($this->cookies->Bar_Foo));
    }
    
    public function test__unset()
    {
        $this->cookies->set('foo_bar', array());

        $this->assertTrue(isset($this->cookies->foo_bar));

        unset($this->cookies->foo_bar);

        $this->assertFalse(isset($this->cookies->foo_bar));
    }
    
    public function testCount()
    {
        $this->cookies->set('Foo', array());
        $this->cookies->set('max', array('value' => 'hi'));

        $this->assertEquals(2, count($this->cookies));
    }
    
    public function testGetIterator()
    {
        $this->assertInstanceOf('\IteratorAggregate', $this->cookies);
        $this->assertInstanceOf('\ArrayIterator', $this->cookies->getIterator());
    }

    public function testAddWithCookie()
    {
        $cookie  = new Cookie('Foo', 'Bar', null, null, null, null, null);

        $this->cookies->set($cookie);

        $this->assertSame($cookie, $this->cookies->Foo);
    }

    public function testSetFromString()
    {
        $set      = 'name=value; Expires=Wed, 09 Jun 2021 10:18:14 GMT;httponly';

        $this->cookies->setFromString($set);

        $expected = ['name' => $this->newCookie('name', 'value', 'Wed, 09 Jun 2021 10:18:14 GMT')];
        $this->assertEquals($expected, $this->cookies->getAll());
    }

    public function testSetAndGetAll()
    {
        $this->cookies->setAll([
            'login' => [
                'value' => '1234567890',
            ],
            'usrid' => [
                'value' => '0987654321'
            ],
        ]);
        
        $actual = $this->cookies->getAll();
        $expect = [
          'login' => $this->newCookie(
            'login',
            '1234567890',
            0,
            NULL,
            NULL,
            false,
            true)
          ,
          'usrid' => $this->newCookie(
            'usrid',
            '0987654321',
            0,
            NULL,
            NULL,
            false,
            true),
        ];
        
        $this->assertEquals($expect, $actual);
    }
    /**
     * @todo Implement testSend().
     */
    public function testSend()
    {
        $this->cookies->setAll([
            'login' => [
                'value' => '1234567890',
            ],
            'usrid' => [
                'value' => '0987654321'
            ],
        ]);
        
        $this->cookies->send();
        
        $expect = [
          0 => [
            'name' => 'login',
            'value' => '1234567890',
            'expire' => 0,
            'path' => NULL,
            'domain' => NULL,
            'secure' => false,
            'httponly' => true,
          ],
          1 => [
            'name' => 'usrid',
            'value' => '0987654321',
            'expire' => 0,
            'path' => NULL,
            'domain' => NULL,
            'secure' => false,
            'httponly' => true,
          ],
        ];

        $this->assertSame($expect, MockHttp::$cookies);
    }
}
