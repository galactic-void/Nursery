<?php
namespace Aura\Http;

use Aura\Http\Factory\Header as HeaderFactory;
use Aura\Http\Header as Header;

/**
 * Test class for Headers.
 * Generated by PHPUnit on 2011-05-10 at 11:16:06.
 */
class HeadersTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Headers
     */
    protected $headers;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->headers = new Headers(new HeaderFactory);
        MockHttp::reset();
    }

    protected function newHeader($label, $value)
    {
        return new Header($label, $value);
    }

    public function test__clone()
    {
        $this->headers->add('Foo', 'Bar');

        $cloned = clone $this->headers;

        $this->assertSame([], $cloned->getAll());
    }
    
    public function test__get()
    {
        $this->headers->add('foo_bar', 'hi');

        $expected = $this->newHeader('Foo-Bar', 'hi');

        $this->assertEquals($expected, $this->headers->{'Foo-Bar'});
    }
    
    public function test__isset()
    {
        $this->headers->add('foo_bar', 'hi');

        $this->assertTrue(isset($this->headers->{'Foo-Bar'}));
        $this->assertFalse(isset($this->headers->{'Bar-Foo'}));
    }

    public function test__unset()
    {
        $this->headers->set('foo_bar', array());

        $this->assertTrue(isset($this->headers->{'Foo-Bar'}));

        unset($this->headers->{'Foo-Bar'});

        $this->assertFalse(isset($this->headers->{'Foo-Bar'}));
    }
    
    public function testcount()
    {   
        $this->headers->set('foo_bar', 'hi');
        $this->headers->add('Foo', 'Bar');
        $this->headers->add('Foo', 'Powers');

        $this->assertEquals(3, count($this->headers));
    }

    public function testGetIterator()
    {
        $this->assertInstanceOf('\IteratorAggregate', $this->headers);
        $this->assertInstanceOf('\ArrayIterator', $this->headers->getIterator());
    }

    public function testAddWithHeader()
    {
        $header  = new Header('Foo', 'Bar');

        $this->headers->add($header, null);

        $this->assertSame($header, $this->headers->get('Foo', false));
    }

    public function testSetWithHeader()
    {
        $header  = new Header('Foo', 'Bar');

        $this->headers->set($header, null);

        $this->assertSame($header, $this->headers->get('Foo', false));
    }

    public function testSetAndAdd()
    {
        $this->headers->set('Foo', 'bar');
        $this->headers->set('Baz', 'dib');
        $this->headers->add('Baz', 'zim');
        $actual = $this->headers->getAll();
        $expect = [
          'Foo' => 
          [
            0 => $this->newHeader('Foo', 'bar')
          ],
          'Baz' => 
          [
            0 => $this->newHeader('Baz', 'dib'),
            1 => $this->newHeader('Baz', 'zim'),
          ],
        ];
        $this->assertEquals($expect, $actual);
    }

    /**
     * @todo Implement testGetAll().
     */
    public function testSetAndGetAll()
    {
        $this->headers->setAll([
            "Foo\r\nBar" => 'foo header',
            "baz-dib_gir" => 'baz header',
        ]);
        
        $actual = $this->headers->getAll();
        $expect = [
          'Foobar' => 
          [
            0 => $this->newHeader('Foobar', 'foo header'),
          ],
          'Baz-Dib-Gir' => 
          [
            0 => $this->newHeader('Baz-Dib-Gir', 'baz header'),
          ],
        ];
        
        $this->assertEquals($expect, $actual);
    }
    
    /**
     * @todo Implement testSend().
     */
    public function testSend()
    {
        $this->headers->set('Foo', 'bar');
        $this->headers->set('Baz', 'dib');
        $this->headers->add('Baz', 'zim');
        $this->headers->send();
        $expect = [
          0 => 'Foo: bar',
          1 => 'Baz: dib',
          2 => 'Baz: zim',
        ];
        
        $this->assertSame(MockHttp::$headers, $expect);
    }
}
